{
  "version": "https://jsonfeed.org/version/1",
  "title": "艾迪酥筆記",
  "home_page_url": "https://blog.eddiesu.com",
  "feed_url": "https://blog.eddiesu.com/feed/feed.json",
  "description": "騙吃騙喝的學習心得與技術分享",
  "author": {
    "name": "艾迪酥 (Eddie Su)",
    "url": ""
  },
  "items": [{
      "id": "https://blog.eddiesu.com/posts/%E6%85%98%EF%BC%8C%E6%8F%90%E4%BA%A4%E9%8C%AF%E8%AA%A4%E7%9A%84%E7%A8%8B%E5%BC%8F%E8%A9%B2%E6%80%8E%E9%BA%BC%E8%BE%A6%EF%BC%9F/",
      "url": "https://blog.eddiesu.com/posts/%E6%85%98%EF%BC%8C%E6%8F%90%E4%BA%A4%E9%8C%AF%E8%AA%A4%E7%9A%84%E7%A8%8B%E5%BC%8F%E8%A9%B2%E6%80%8E%E9%BA%BC%E8%BE%A6%EF%BC%9F/",
      "title": "慘，Git 提交錯誤的程式該怎麼辦？",
      "content_html": "<h3 id=\"%E5%89%8D%E8%A8%80\">前言 <a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a></h3>\n<p>人總有會犯錯的時候，或是隊友開雷的時候，或是當你 log 潔癖犯病的時候，<br>\n其時候還是有辦法補救的。</p>\n<h3 id=\"%E5%88%A0%E9%99%A4%E6%9F%90%E6%AC%A1-commit\">删除某次 commit <a class=\"direct-link\" href=\"#%E5%88%A0%E9%99%A4%E6%9F%90%E6%AC%A1-commit\">#</a></h3>\n<p>可以透過 git reset 將程式回復到某次提交的狀態，<br>\n執行前，建議先將程式做好備份，避免心血化為烏有，<br>\ncommit 回復後，之前提的修改可能會消失，<br>\n主要是看你選擇 soft 或是 hard。</p>\n<blockquote>\n<p>git reset --soft：回復到某次提交狀態後的修改會被退回到暫存區。<br>\ngit reset --hard：回復到某次提交狀態後的修改不做任何保留。<br>\ngit status      ：查看紀錄。</p>\n</blockquote>\n<p>操作如下：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> log <span class=\"token comment\">#查看 commit_id</span><br><span class=\"token function\">git</span> <span class=\"token function\">git</span> reset <span class=\"token punctuation\">{</span>commit_id<span class=\"token punctuation\">}</span> <span class=\"token comment\">#commit_id:要回復至哪次 commit</span><br><span class=\"token function\">git</span> push origin HEAD <span class=\"token parameter variable\">--force</span> <span class=\"token comment\">#強制推送至遠端</span></code></pre>\n<h3 id=\"%E8%AA%A4%E5%88%AA%E4%BA%86%3F!\">誤刪了?! <a class=\"direct-link\" href=\"#%E8%AA%A4%E5%88%AA%E4%BA%86%3F!\">#</a></h3>\n<p>如果不小心刪錯了，還是能搶救的~</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> reflog <span class=\"token comment\">#詳細顯示你每個指令的 SHA-1 值</span><br><span class=\"token function\">git</span> reset <span class=\"token punctuation\">{</span>hash<span class=\"token punctuation\">}</span> <span class=\"token parameter variable\">--hard</span> <span class=\"token comment\">#hash:要回復至哪個版本的編號</span></code></pre>\n<h3 id=\"%E5%8F%83%E8%80%83\">參考 <a class=\"direct-link\" href=\"#%E5%8F%83%E8%80%83\">#</a></h3>\n<ul>\n<li><a href=\"https://blog.csdn.net/qq_34977392/article/details/110817621\">删除 commit 的三种方法</a></li>\n</ul>\n",
      "date_published": "2022-08-31T00:00:00Z"
    },{
      "id": "https://blog.eddiesu.com/posts/Git%20%E5%A4%9A%E5%80%8B%E5%B8%B3%E8%99%9F%E5%B0%8D%E6%87%89%E5%88%B0%E4%B8%8D%E5%90%8C%E7%9A%84%20repository%20%E6%99%82%EF%BC%8C%E8%A9%B2%E6%80%8E%E9%BA%BC%E8%BE%A6%EF%BC%9F/",
      "url": "https://blog.eddiesu.com/posts/Git%20%E5%A4%9A%E5%80%8B%E5%B8%B3%E8%99%9F%E5%B0%8D%E6%87%89%E5%88%B0%E4%B8%8D%E5%90%8C%E7%9A%84%20repository%20%E6%99%82%EF%BC%8C%E8%A9%B2%E6%80%8E%E9%BA%BC%E8%BE%A6%EF%BC%9F/",
      "title": "Git 多個帳號對應到不同的 repository 時，該怎麼辦？",
      "content_html": "<h3 id=\"%E5%89%8D%E8%A8%80\">前言 <a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a></h3>\n<p>現今 Git 百家爭鳴，舉凡 Github、Gitlab、Azure DevOps...<br>\n應改不可能只使用一個平台，或是只有一個帳號吧！<br>\n如果是，那以下可省略了。👋</p>\n<h3 id=\"%E5%85%A8%E5%9F%9F%E8%A8%AD%E5%AE%9A\">全域設定 <a class=\"direct-link\" href=\"#%E5%85%A8%E5%9F%9F%E8%A8%AD%E5%AE%9A\">#</a></h3>\n<p>首先，檢查一下 gloabal 和 system 的 config，<br>\n主要是看有没有 credential.helper 把帳號密碼存起来了。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> <span class=\"token parameter variable\">-l</span><br><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--system</span> <span class=\"token parameter variable\">-l</span></code></pre>\n<p>確認設在哪個後，執行 unset credential.helper`,<br>\n這樣就能重新輸入帳號密碼了。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> <span class=\"token parameter variable\">--unset</span> credential.helper<br><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--system</span> <span class=\"token parameter variable\">--unset</span> credential.helper</code></pre>\n<h3 id=\"%E5%90%84%E8%87%AA%E7%9A%84%E6%AC%8A%E9%99%90%E8%A8%AD%E5%AE%9A\">各自的權限設定 <a class=\"direct-link\" href=\"#%E5%90%84%E8%87%AA%E7%9A%84%E6%AC%8A%E9%99%90%E8%A8%AD%E5%AE%9A\">#</a></h3>\n<p>先確認一下本地 repository 的遠端連線資訊，<br>\nhttps 開頭的就是使用https，git@ 開頭的就是使用ssh。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote <span class=\"token parameter variable\">-v</span></code></pre>\n<p>以 Github 為例，大概會是長這樣的：</p>\n<blockquote>\n<p><strong>{帳號}</strong>@github.com/<strong>{帳號}</strong>/<strong>{repository 名稱}</strong></p>\n</blockquote>\n<p>設定帳號與 repository 對應：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote set-url origin https://UserA@github.com/UserA/repoA</code></pre>\n<p>這時候 push，就要输入一下 UserA 的密码，然后就能 push 上去了。<br>\n但每次 push 都需要输入密码了也太麻煩了吧！<br>\n為了避免麻烦，針對本地的 repository，設置一下 local 的 credential.helper ：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--local</span> credential.helper store</code></pre>\n<p>查看當前配置：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--list</span></code></pre>\n<p>最後，為了避免 <a href=\"http://user.name\">user.name</a> 與 user.email 使用到痊癒設定，<br>\n在 repository 底下也設定一組吧。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config user.name <span class=\"token string\">\"your name\"</span><br><span class=\"token function\">git</span> config user.email <span class=\"token string\">\"your email\"</span></code></pre>\n<h3 id=\"%E7%B8%BD%E7%B5%90\">總結 <a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a></h3>\n<ol>\n<li>清空 global 和system 的credential.helper。</li>\n<li>對 repository 設定一下 remote 和 local 的 credential.helper</li>\n</ol>\n",
      "date_published": "2022-08-30T00:00:00Z"
    },{
      "id": "https://blog.eddiesu.com/posts/HelloWorld/",
      "url": "https://blog.eddiesu.com/posts/HelloWorld/",
      "title": "Hello World!",
      "content_html": "<h3 id=\"%E5%89%8D%E8%A8%80\">前言 <a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a></h3>\n<p>身為工程獅、程序猿的密，第一次接觸 Eleventy，發個 Hello World 也是合情合理的吧。</p>\n<h3 id=\"%E5%8F%83%E8%80%83\">參考 <a class=\"direct-link\" href=\"#%E5%8F%83%E8%80%83\">#</a></h3>\n<ul>\n<li><a href=\"https://frannn.dev/posts/82901432/\">離開 Hexo，使用 Eleventy 架設部落格</a></li>\n<li><a href=\"https://blog.huli.tw/2021/08/22/eleventy-over-hexo/\">除了 hexo，也可以考慮用 eleventy 來寫技術部落格</a></li>\n<li><a href=\"https://jason-memo.dev/posts/why-i-leave-medium-and-build-blog-with-eleventy/\">為什麼我離開 Medium 用 eleventy 做一個 blog</a></li>\n</ul>\n",
      "date_published": "2022-08-29T00:00:00Z"
    }
  ]
}
